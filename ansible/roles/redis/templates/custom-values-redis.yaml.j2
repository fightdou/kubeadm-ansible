image:
  repository: {{ kube_image_repository }}/redis
  tag: {{ kube_image_tag }}
  pullPolicy: IfNotPresent
  pullSecrets: {{ docker_register_secrets_name }}

replicas: {{ replicaNum }}
labels: {}
serviceAccount:
  create: true
rbac:
  create: true
sysctlImage:
  enabled: false
  command: []
  registry: docker.io
  repository: bitnami/minideb
  tag: latest
  pullPolicy: IfNotPresent
  mountHostSys: false

hostNetwork: {{ redis_host_network }}
priorityClassName: {{ kube_priority_name }}

redis:
  port: "{{ redis_server_port }}"
  masterGroupName: "{{ redis_master_group_name }}"
  config: {}
  resources: {}
    #  requests:
    #    memory: 200Mi
    #    cpu: 100m
    #  limits:
    #    memory: 700Mi
    #    cpu: 500m

sentinel:
  enabled: true
  port: "{{ redis_sentinel_port }}"
  quorum: 2
  config:
    down-after-milliseconds: 10000
    failover-timeout: 180000

  resources: {}
    #  requests:
    #    memory: 200Mi
    #    cpu: 100m
    #  limits:
    #    memory: 700Mi
    #    cpu: 500m

securityContext: {}

nodeSelector:
  {{ control_node_role_name }}: {{ node_role_value }}
hardAntiAffinity: true
additionalAffinities: {}

affinity: |

exporter:
  enabled: false
  image: oliver006/redis_exporter
  tag: v0.31.0
  pullPolicy: IfNotPresent
  port: 9121
  scrapePath: /metrics
  resources: {}
  extraArgs: {}

podDisruptionBudget: {}
auth: true
redisPassword: "{{ redis_master_password }}"
authKey: auth

persistentVolume:
  enabled: {{ enable_pvc }}
  storageClass: "{{ rbd_storage_class_name }}"
  accessModes:
    - ReadWriteOnce
  size: "{{ redis_storage_size }}"
  annotations: {}
init:
  resources: {}
hostPath:
  path: /var/lib/redis
  chown: true
