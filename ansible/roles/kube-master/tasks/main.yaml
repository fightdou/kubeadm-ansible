- name: 读取 kubelet.conf 文件 stat 信息
  stat: 
    path: /etc/kubernetes/kubelet.conf
  register: kubelet_conf_stat

- name: 拉取 master 节点需要拉取的镜像列表
  shell: kubeadm config images pull --image-repository={{ kube_image_repository }} --kubernetes-version={{ kubernetes_version }}

# 初始化第一个 master 节点
- include_tasks: master-init.yml
  when:
  - not kubelet_conf_stat.stat.exists
  - inventory_hostname == groups['kube-master'][0]

# 初始化其他 master 节点
- include_tasks: master-join.yml
  when:
  - not kubelet_conf_stat.stat.exists
  - inventory_hostname != groups['kube-master'][0]
  - inventory_hostname in (groups['kube-master'] + groups['new-master'])

- name: 创建 cni 相关目录
  file: 
    name: /etc/kubernetes/plugins/network-plugin
    state: directory
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"

# 配置网络CNI插件
- name: 渲染 flannel 配置文件
  template:
    src: kube-flannel.yaml.j2
    dest: /etc/kubernetes/plugins/network-plugin/kube-flannel.yaml
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: Deploy flannel in yaml file
  kubernetes.core.k8s:
    src: /etc/kubernetes/plugins/network-plugin/kube-flannel.yaml
    namespace: default
    state: present
    wait: yes
    wait_sleep: 5
    wait_timeout: 60
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"

# 配置 metrics-server
- name: 渲染 metrics-server 配置文件
  template:
    src: metrics-server.yaml.j2 
    dest: /etc/kubernetes/plugins/network-plugin/metrics-server.yaml
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: Deploy metrics server in yaml file
  kubernetes.core.k8s:
    src: /etc/kubernetes/plugins/network-plugin/metrics-server.yaml
    namespace: default
    state: present
    wait: yes
    wait_sleep: 5
    wait_timeout: 60
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: 校验 helm 命令是否存在
  shell: helm version
  register: helm_version
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"

- block:
  - name: 安装 helm
    shell: wget https://get.helm.sh/helm-v3.8.1-linux-amd64.tar.gz -P /root

  - name: 解压 helm 包
    shell: tar -xvf /root/helm-v3.8.1-linux-amd64.tar.gz -C /opt

  - name: 复制 helm 二进制文件
    copy:
      src: /opt/linux-amd64/helm
      dest: /usr/local/bin
      mode: "0755"
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - helm_version is not success

- name: 查看 k8s 节点 标签
  shell: kubectl get nodes --show-labels | grep {{ control_node_role_name }} | wc -l
  register: node_role

- name: 设置 control node lables
  shell: kubectl label node {{ item }} {{ control_node_role_name }}={{ node_role_value }}
  with_items: "{{ groups['control'] }}"
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - node_role.stdout == "0"

- name: 查看 docker register 是否创建
  shell: kubectl get secrets -n {{ helm_install_namespace }} | grep {{ docker_register_secrets_name }} | wc -l
  register: docker_result
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: 创建 harbor register secrets
  shell: kubectl create secret docker-registry {{ docker_register_secrets_name }} --docker-server={{ harbor_address }} --docker-username={{ harbor_username }} --docker-password={{ harbor_password }} -n {{ helm_install_namespace }}
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - docker_result.stdout == "0"

# 备份etcd
- block:
  - name: 第一个 etcd 节点创建 etcd 备份目录
    file: 
      name: "{{ etcd_backup_dir }}"
      state: directory

  - name: 第一个 etcd 节点创建 etcd 备份工具
    template: 
      src: etcdtools.j2
      dest: /usr/local/bin/etcdtools
      owner: root
      mode: 0755
  - name: 第一个 etcd 节点创建 etcd 定时备份 crontab
    cron: 
      minute: "0"
      hour: "{{ etcd_backup_hour }}"
      name: Backup etcd databases
      job: >
        /usr/local/bin/etcdtools backup
  - name: 第一个 etcd 节点创建清理 etcd 定时备份文件 crontab
    cron: 
      minute: "30"
      hour: "{{ etcd_backup_hour }}"
      name: Clean etcd databases backup file
      job: >
        /usr/local/bin/etcdtools cleanup
  run_once: True
  delegate_to: "{{ groups['kube-master'][0] }}"
